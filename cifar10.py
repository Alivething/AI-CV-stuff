# -*- coding: utf-8 -*-
"""cifar10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x4npg9ats3IDMLvsm22Cby-Fvhhg877G
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

(X_train, y_train), (X_test,y_test) = datasets.cifar10.load_data()

classes = ["airplane","automobile","bird","cat","deer","dog","frog","horse","ship","truck"]

def showImage(X, y, index):
    plt.figure(figsize = (15,2))
    plt.imshow(X[index])
    plt.xlabel(classes[y[index]])

showImage(X_train, y_train, 10)

y_train = np.squeeze(y_train)
y_test = np.squeeze(y_test)

# from keras.utils import to_categorical()
# y_train = to_categorical(y_train) 
# y_test = to_categorical(y_test)

X_train = X_train/255.0
X_test = X_test/255.0

print(X_train[0].shape)

model = models.Sequential()
model.add(layers.Conv2D(32, kernel_size=3, activation='relu', input_shape=(32,32,3)))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Conv2D(64, kernel_size=3, activation='relu'))
model.add(layers.MaxPooling2D((2,2)))
model.add(layers.Flatten())

model.add(layers.Dense(10, activation='softmax'))

model.summary()

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs = 10)

model.evaluate(X_test, y_test)

y_pred = model.predict(X_test[0:3])
y_classes = [np.argmax(element) for element in y_pred]
showImage(X_test, y_test, 0)
showImage(X_test, y_test, 1)
showImage(X_test, y_test, 2)
print(y_classes)

# model.save("cifar10.h5")